variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  CI_BUILD_NUMBER: $(Build.BuildId)
  BRANCH_NAME: $(Build.SourceBranchName)
  TAG_NAME: $(Build.SourceBranchName)

jobs:
  - template: jobs/build_and_test.yml
    parameters:
      name: linux
      vmImage: 'ubuntu-16.04'
  
  - template: jobs/build_and_test.yml
    parameters:
      name: windows
      vmImage: 'vs2017-win2016'
  
  - template: jobs/build_and_test.yml
    parameters:
      name: mac
      vmImage: 'macOS-10.13'

  - job: deploy
    dependsOn:
      - linux
      - windows
      - mac
    pool:
      vmImage: 'vs2017-win2016'
    condition: and( succeeded(), startsWith( variables['Build.SourceBranch'], 'refs/tags' ) )
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: current
          artifactName: 'NuGet-Packed'
          downloadPath: .
      
      # Hack for file not found when using ./build.sh deploy
      # With ls -la the files are listed, but can't be found anyway.
      # I tried quite a lot, relative and absolute path, nothing worked.
      # This hack does the job.
      - bash: |
          chmod u+x ./build.sh

          echo "-------------------------------------------------"
          echo "Nuget-Packed:"
          ls -la "NuGet-Packed"

          if [[ "$TAG_NAME" =~ ^v([0-9])\.([0-9])\.([0-9])(-(preview-[0-9]+))$ ]]; then
            mkdir deploy_myget
            
            for package in NuGet-Packed/*.nupkg; do
                mv $package deploy_myget
            done            
          elif [[ "$TAG_NAME" =~ ^v([0-9])\.([0-9])\.([0-9])$ ]]; then
            mkdir deploy_nuget
            
            for package in NuGet-Packed/*.nupkg; do
                mv $package deploy_nuget
            done            
          else
            echo "no deploy, as $TAG_NAME does not match"
            echo ##vso[task.complete result=Skipped;]tag does not match for deploy
          fi

          echo "-------------------------------------------------"
          echo "myget:"
          ls -la deploy_myget
          echo "-------------------------------------------------"
          echo "nuget:"
          ls -la deploy_nuget
          echo "-------------------------------------------------"
        displayName: 'deploy to myget / nuget'
      
      - task: NuGetCommand@2
        inputs:
          command: push
          packagesToPush: deploy_myget/*.nupkg
          nuGetFeedType: external
          publishFeedCredentials: 'myget - gfoidl'
        displayName: deploy_myget
      
      - task: NuGetCommand@2
        inputs:
          command: push
          packagesToPush: deploy_nuget/*.nupkg
          nuGetFeedType: external
          publishFeedCredentials: 'nuget - gfoidl'
        displayName: deploy_nuget
